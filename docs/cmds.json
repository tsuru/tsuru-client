{
  "help": {
    "usage": "tsuru command [args]", 
    "desc": ""
  }, 
  "app-info": {
    "usage": "tsuru app-info [-a/--app appname]", 
    "desc": "Shows information about a specific app. Its state, platform, git repository,\netc. You need to be a member of a team that has access to the app to be able to\nsee information about it.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  \n"
  }, 
  "node-container-info": {
    "usage": "tsuru node-container-info <name>", 
    "desc": "Show details about a single node container.\n\nMinimum # of arguments: 1\nMaximum # of arguments: 1\n"
  }, 
  "docker-healing-info": {
    "usage": "tsuru docker-healing-info", 
    "desc": "Show the current configuration for active healing nodes.\n\n"
  }, 
  "app-list": {
    "usage": "tsuru app-list", 
    "desc": "Lists all apps that you have access to. App access is controlled by teams. If\nyour team has access to an app, then you have access to it.\n\nFlags can be used to filter the list of applications.\n\nFlags:\n  \n  -l, --locked  (= false)\n      Filter applications by lock status\n  -n, --name (= \"\")\n      Filter applications by name\n  -o, --pool (= \"\")\n      Filter applications by pool\n  -p, --platform (= \"\")\n      Filter applications by platform\n  -q  (= false)\n      Display only applications name\n  -s, --status (= \"\")\n      Filter applications by unit status. Accepts multiple values separated by commas. Possible values can be: building, created, starting, error, started, stopped, asleep\n  -t, --team (= \"\")\n      Filter applications by team owner\n  -u, --user (= \"\")\n      Filter applications by owner\n  \n"
  }, 
  "service-unbind": {
    "usage": "tsuru service-unbind", 
    "desc": "This command was removed. You should use `tsuru service-instance-unbind` instead.\n\n"
  }, 
  "service-instance-grant": {
    "usage": "tsuru service-instance-grant <service-name> <service-instance-name> <team-name>", 
    "desc": "Grant access to team in a service instance.\n\nMinimum # of arguments: 3\n"
  }, 
  "change-password": {
    "usage": "tsuru change-password", 
    "desc": "Changes the password of the logged in user. It will ask for the current\npassword, the new and the confirmation.\n\n"
  }, 
  "docker-autoscale-rule-remove": {
    "usage": "tsuru docker-autoscale-rule-remove [rule-name] [-y/--assume-yes]", 
    "desc": "Removes an auto-scale rule. The name of the rule may be omited, which means \"remove the default rule\".\n\nFlags:\n  \n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \n"
  }, 
  "docker-autoscale-rule-set": {
    "usage": "tsuru docker-autoscale-rule-set [-f/--filter-value <pool name>] [-c/--max-container-count 0] [-m/--max-memory-ratio 0.9] [-d/--scale-down-ratio 1.33] [--no-rebalance-on-scale] [--enable] [--disable]", 
    "desc": "Creates or update an auto-scale rule. Using resources limitation (amount of container or memory usage).\n\nFlags:\n  \n  -c, --max-container-count  (= 0)\n      The maximum amount of containers on every node. Might be zero, which means no maximum value. Whenever this value is reached, tsuru will trigger a new auto scale event.\n  -d, --scale-down-ratio  (= 1.33)\n      The ratio for triggering an scale down event. The default value is 1.33, which mean that whenever it gets one third of the resource utilization (memory ratio or container count).\n  --disable  (= false)\n      A boolean flag indicating whether the rule should be disabled\n  --enable  (= false)\n      A boolean flag indicating whether the rule should be enabled\n  -f, --filter-value (= \"\")\n      The pool name matching the rule. This is the unique identifier of the rule.\n  -m, --max-memory-ratio  (= 0)\n      The maximum memory usage per node. 0 means no limit, 1 means 100%. It is fine to use values greater than 1, which means that tsuru will overcommit memory in Docker nodes. Keep in mind that container count has higher precedence than memory ratio, so if --max-container-count is defined, the value of --max-memory-ratio will be ignored.\n  --no-rebalance-on-scale  (= false)\n      A boolean flag indicating whether containers should NOT be rebalanced after running an scale. The default behavior is to always rebalance the containers.\n  \n"
  }, 
  "platform-list": {
    "usage": "tsuru platform-list", 
    "desc": "Lists the available platforms. All platforms displayed in this list may be used to create new apps (see app-create).\n\n"
  }, 
  "app-start": {
    "usage": "tsuru app-start [-a/--app appname] [-p/--process processname]", 
    "desc": "Starts an application, or one of the processes of the application.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  -p, --process (= \"\")\n      Process name\n  \n"
  }, 
  "service-instance-revoke": {
    "usage": "tsuru service-instance-revoke <service-name> <service-instance-name> <team-name>", 
    "desc": "Revoke access to team in a service instance.\n\nMinimum # of arguments: 3\n"
  }, 
  "app-pool-change": {
    "usage": "tsuru app-pool-change", 
    "desc": "This command was removed. You should use `tsuru app-update` instead.\n\n"
  }, 
  "docker-autoscale-run": {
    "usage": "tsuru docker-autoscale-run [-y/--assume-yes]", 
    "desc": "Run node auto scale checks once. This command will work even if [[docker:auto-\nscale:enabled]] config entry is set to false. Auto scaling checks may trigger\nthe addition, removal or rebalancing of docker nodes, as long as these nodes\nwere created using an IaaS provider registered in tsuru.\n\nFlags:\n  \n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \n"
  }, 
  "service-instance-update": {
    "usage": "tsuru service-instance-update <service-name> <service-instance-name> [-d/--description description]", 
    "desc": "Updates a service instance of a service.\n\nThe --description parameter sets a description for your service instance.\n\nFlags:\n  \n  -d, --description (= \"\")\n      service instance description\n  \nMinimum # of arguments: 2\n"
  }, 
  "bs-upgrade": {
    "usage": "tsuru bs-upgrade", 
    "desc": "This command was removed. You should use `tsuru-admin node-container-upgrade big-sibling` instead.\n\n"
  }, 
  "node-container-delete": {
    "usage": "tsuru node-container-delete <name> [-p/--pool poolname] [-y]", 
    "desc": "Delete existing node container.\n\nFlags:\n  \n  -p, --pool (= \"\")\n      Pool to remove container config. If empty the default node container will be removed.\n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \nMinimum # of arguments: 1\nMaximum # of arguments: 1\n"
  }, 
  "role-assign": {
    "usage": "tsuru role-assign <role-name> <user-email> [<context-value>]", 
    "desc": "Assign an existing role to a user with some context value.\n\nMinimum # of arguments: 2\n"
  }, 
  "app-stop": {
    "usage": "tsuru app-stop [-a/--app appname] [-p/--process processname]", 
    "desc": "Stops an application, or one of the processes of the application.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  -p, --process (= \"\")\n      Process name\n  \n"
  }, 
  "pool-add": {
    "usage": "tsuru pool-add <pool> [-p/--public] [-d/--default] [-f/--force]", 
    "desc": "Adds a new pool.\n\nEach docker node added using [[docker-node-add]] command belongs to one pool.\nAlso, when creating a new application a pool must be chosen and this means\nthat all units of the created application will be spawned in nodes belonging\nto the chosen pool.\n\nFlags:\n  \n  -d, --default  (= false)\n      Make pool default (when none is specified during [[app-create]] this pool will be used)\n  -f, --force  (= false)\n      Force overwrite default pool\n  -p, --public  (= false)\n      Make pool public (all teams can use it)\n  \nMinimum # of arguments: 1\n"
  }, 
  "node-container-update": {
    "usage": "tsuru node-container-update <name> [-p/--pool poolname] [-r/--raw path=value]... [docker run flags]...", 
    "desc": "Update an existing node container. If the pool name is omitted the default\nconfiguration will be updated. When updating node containers the specified\nconfiguration will be merged with the existing configuration.\n\nFlags:\n  \n  -e, --env  (= [])\n      Set environment variables\n  --image (= \"\")\n      Image that will be used\n  --log-driver (= \"\")\n      Logging driver for container\n  --log-opt  (= {})\n      Log driver options\n  --net (= \"\")\n      Connect a container to a network\n  -o, --pool (= \"\")\n      Pool to update container config. If empty it'll be a default entry to all pools.\n  -p, --publish  (= [])\n      Publish a container's port(s) to the host\n  --privileged  (= false)\n      Give extended privileges to this container\n  -r, --raw  (= {})\n      Add raw parameter to node container api call\n  --restart (= \"\")\n      Restart policy to apply when a container exits\n  -v, --volume  (= [])\n      Bind mount a volume\n  \nMinimum # of arguments: 1\nMaximum # of arguments: 1\n"
  }, 
  "app-log": {
    "usage": "tsuru app-log [-a/--app appname] [-l/--lines numberOfLines] [-s/--source source] [-u/--unit unit] [-f/--follow]", 
    "desc": "Shows log entries for an application. These logs include everything the\napplication send to stdout and stderr, alongside with logs from tsuru server\n(deployments, restarts, etc.)\n\nThe [[--lines]] flag is optional and by default its value is 10.\n\nThe [[--source]] flag is optional and allows filtering logs by log source\n(e.g. application, tsuru api).\n\nThe [[--unit]] flag is optional and allows filtering by unit. It's useful if\nyour application has multiple units and you want logs from a single one.\n\nThe [[--follow]] flag is optional and makes the command wait for additional\nlog output\n\nThe [[--no-date]] flag is optional and makes the log output without date.\n\nThe [[--no-source]] flag is optional and makes the log output without source\ninformation, useful to very dense logs.\n\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  -f, --follow  (= false)\n      Follow logs\n  -l, --lines  (= 10)\n      The number of log lines to display\n  --no-date  (= false)\n      No date information\n  --no-source  (= false)\n      No source information\n  -s, --source (= \"\")\n      The log from the given source\n  -u, --unit (= \"\")\n      The log from the given unit\n  \n"
  }, 
  "app-deploy": {
    "usage": "tsuru app-deploy [-a/--app <appname>] [-i/--image <image_url>] <file-or-dir-1> [file-or-dir-2] ... [file-or-dir-n]", 
    "desc": "Deploys set of files and/or directories to tsuru server. Some examples of\ncalls are:\n\n::\n\n    $ tsuru app-deploy .\n    $ tsuru app-deploy myfile.jar Procfile\n    $ tsuru app-deploy mysite\n    $ tsuru app-deploy -i http://registry.mysite.com:5000/image-name\n\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  -i, --image (= \"\")\n      The image to deploy in app\n  -m, --message (= \"\")\n      A message describing this deploy\n  \n"
  }, 
  "role-permission-remove": {
    "usage": "tsuru role-permission-remove <role-name> <permission-name>", 
    "desc": "Remove a permission from an existing role.\n\nMinimum # of arguments: 2\n"
  }, 
  "app-grant": {
    "usage": "tsuru app-grant <teamname> [-a/--app appname]", 
    "desc": "Allows a team to access an application. You need to be a member of a team that\nhas access to the app to allow another team to access it. grants access to an\napp to a team.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  \nMinimum # of arguments: 1\n"
  }, 
  "docker-node-update": {
    "usage": "tsuru docker-node-update <address> [param_name=param_value...] [--disable] [--enable]", 
    "desc": "Modifies metadata associated to a docker node. If a parameter is set to an\nempty value, it will be removed from the node's metadata.\n\nIf the [[--disable]] flag is used, the node will be marked as disabled and the\nscheduler won't consider it when selecting a node to receive containers.\n\nFlags:\n  \n  --disable  (= false)\n      Disable node in scheduler.\n  --enable  (= false)\n      Enable node in scheduler.\n  \nMinimum # of arguments: 1\n"
  }, 
  "app-restart": {
    "usage": "tsuru app-restart [-a/--app appname] [-p/--process processname]", 
    "desc": "Restarts an application, or one of the processes of the application.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  -p, --process (= \"\")\n      Process name\n  \n"
  }, 
  "app-swap": {
    "usage": "tsuru app-swap <app1-name> <app2-name> [-c/--cname-only]", 
    "desc": "Swaps routing between two apps. This allows zero downtime and makes rollback\nas simple as swapping the applications back.\n\nUse [[--cname-only]] if you want to swap all cnames except the default\ncname of application\n\nFlags:\n  \n  -c, --cname-only  (= false)\n      Swap all cnames except the default cname.\n  \nMinimum # of arguments: 2\n"
  }, 
  "app-plan-change": {
    "usage": "tsuru app-plan-change", 
    "desc": "This command was removed. You should use `tsuru app-update` instead.\n\n"
  }, 
  "event-list": {
    "usage": "tsuru event-list [-k kindName]", 
    "desc": "Lists events possibly filtering them.\n\nFlags:\n  \n  -k, --kind (= \"\")\n      Filter events by kind name\n  -o, --owner (= \"\")\n      Filter events by owner name\n  -r, --running  (= false)\n      Shows only currently running events\n  -t, --target (= \"\")\n      Filter events by target name\n  -v, --target-value (= \"\")\n      Filter events by target value\n  \n"
  }, 
  "unit-add": {
    "usage": "tsuru unit-add <# of units> [-a/--app appname] [-p/--process processname]", 
    "desc": "Adds new units to a process of an application. You need to have access to the\napp to be able to add new units to it.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  -p, --process (= \"\")\n      Process name\n  \nMinimum # of arguments: 1\n"
  }, 
  "bs-info": {
    "usage": "tsuru bs-info", 
    "desc": "This command was removed. You should use `tsuru-admin node-container-info big-sibling` instead.\n\n"
  }, 
  "team-user-remove": {
    "usage": "tsuru team-user-remove", 
    "desc": "This command was removed. You should use `tsuru role-dissociate` instead.\n\n"
  }, 
  "role-add": {
    "usage": "tsuru role-add <role-name> <context-type> [--description/-d description]", 
    "desc": "Create a new role for the specified context type.\nValid context types are:\n\n* global\n* app\n* team\n* pool\n* iaas\n* service\n* service-instance\n\nThe [[--description]] parameter sets a description for your role.\nIt is an optional parameter, and if its not set the role will only not have a\ndescription associated.\n\n\nFlags:\n  \n  -d, --description (= \"\")\n      Role description\n  \nMinimum # of arguments: 2\n"
  }, 
  "role-default-list": {
    "usage": "tsuru role-default-list", 
    "desc": "List all roles set as default on any event.\n\n"
  }, 
  "plugin-remove": {
    "usage": "tsuru plugin-remove <plugin-name>", 
    "desc": "Removes a previously installed tsuru plugin.\n\nMinimum # of arguments: 1\n"
  }, 
  "version": {
    "usage": "tsuru version", 
    "desc": "display the current version\n\n"
  }, 
  "node-container-list": {
    "usage": "tsuru node-container-list", 
    "desc": "List all existing node containers.\n\nFlags:\n  \n  -q  (= false)\n      Show only names of existing node containers.\n  \n"
  }, 
  "container-move": {
    "usage": "tsuru container-move <container id> <to host>", 
    "desc": "Move specified container to another host.\nThis command allow you to specify a container id and a destination host, this\nwill create a new container on the destination host and remove the container\nfrom its previous host.\n\nMinimum # of arguments: 2\n"
  }, 
  "platform-add": {
    "usage": "tsuru platform-add <platform name> [--dockerfile/-d Dockerfile] [--image/-i image]", 
    "desc": "Adds a new platform to tsuru.\n\nThe name of the image can be automatically inferred in case you're using an\nofficial platform. Check https://github.com/tsuru/platforms for a list of\nofficial platforms and instructions on how to create a custom platform.\n\nExamples:\n\n\t[[tsuru-admin platform-add java # uses official tsuru/java image from docker hub]]\n\t[[tsuru-admin platform-add java -i registry.company.com/tsuru/java # uses custom Java image]]\n\t[[tsuru-admin platform-add java -d /data/projects/java/Dockerfile # uses local Dockerfile]]\n\t[[tsuru-admin platform-add java -d https://platforms.com/java/Dockerfile # uses remote Dockerfile]]\n\nFlags:\n  \n  -d, --dockerfile (= \"\")\n      URL or path to the Dockerfile used for building the image of the platform\n  -i, --image (= \"\")\n      Name of the prebuilt Docker image\n  \nMinimum # of arguments: 1\n"
  }, 
  "docker-healing-delete": {
    "usage": "tsuru docker-healing-delete [-p/--pool pool] [--enabled] [--max-unresponsive] [--max-unsuccessful]", 
    "desc": "Delete a node healing configuration entry.\n\nIf [[--pool]] is provided the configuration entries from the specified pool\nwill be removed and the default value will be used.\n\nIf [[--pool]] is not provided the configuration entry will be removed from the\ndefault configuration.\n\nFlags:\n  \n  --enabled  (= false)\n      Remove the 'enabled' configuration option\n  --max-unresponsive  (= false)\n      Remove the 'max-unresponsive' configuration option\n  --max-unsuccessful  (= false)\n      Remove the 'max-unsuccessful' configuration option\n  -p, --pool (= \"\")\n      The pool name from where the configuration will be removed. If unset it'll delete the default healing configuration.\n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \n"
  }, 
  "target-add": {
    "usage": "tsuru target-add <label> <target> [--set-current|-s]", 
    "desc": "Adds a new entry to the list of available targets\n\nFlags:\n  \n  -s, --set-current  (= false)\n      Add and define the target as the current target\n  \nMinimum # of arguments: 2\n"
  }, 
  "permission-list": {
    "usage": "tsuru permission-list [-t/--tree]", 
    "desc": "Lists all permissions available to use when defining roles.\n\nFlags:\n  \n  -t, --tree  (= false)\n      Show permissions in tree format.\n  \n"
  }, 
  "logout": {
    "usage": "tsuru logout", 
    "desc": "Logout will terminate the session with the tsuru server.\n\n"
  }, 
  "docker-log-update": {
    "usage": "tsuru docker-log-update [-r/--restart] [-p/--pool poolname] --log-driver <driver> [--log-opt name=value]...", 
    "desc": "Set custom configuration for container logs. By default tsuru configures\napplication containers to send all logs to the tsuru/bs container through\nsyslog.\n\nSetting a custom log-driver allow users to change this behavior and make\ncontainers send their logs directly using the driver bypassing tsuru/bs\ncompletely. In this situation the 'tsuru app-log' command will not work\nanymore.\n\nThe --log-driver option accepts either the value 'bs' restoring tsuru default\nbehavior or any log-driver supported by docker along with their --log-opt. See\nhttps://docs.docker.com/engine/reference/logging/overview/ for more details.\n\nIf --pool is specified the log-driver will only be used on containers started\non the chosen pool.\n\nFlags:\n  \n  --log-driver (= \"\")\n      Chosen log driver. Supported log drivers depend on the docker version running on nodes.\n  --log-opt  (= {})\n      Log options send to the specified log-driver\n  -p, --pool (= \"\")\n      Pool name where log options will be used.\n  -r, --restart  (= false)\n      Whether tsuru should restart all apps on the specified pool.\n  \n"
  }, 
  "service-add": {
    "usage": "tsuru service-add", 
    "desc": "This command was removed. You should use `tsuru service-instance-add` instead.\n\n"
  }, 
  "app-update": {
    "usage": "tsuru app-update [-a/--app appname] [--description/-d description] [--plan/-p plan_name] [--pool/-o pool] [--team-owner/-t team-owner]", 
    "desc": "Updates an app, changing its description, plan or pool information.\n\nThe [[--description]] parameter sets a description for your app.\n\nThe [[--plan]] parameter changes the plan of your app.\n\nThe [[--pool]] parameter changes the pool of your app.\n\nThe [[--team-owner]] parameter sets owner team for an application.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  -d, --description (= \"\")\n      App description\n  -o, --pool (= \"\")\n      App pool\n  -p, --plan (= \"\")\n      App plan\n  -t, --team-owner (= \"\")\n      App team owner\n  \n"
  }, 
  "role-dissociate": {
    "usage": "tsuru role-dissociate <role-name> <user-email> [<context-value>]", 
    "desc": "Dissociate an existing role from a user for some context value.\n\nMinimum # of arguments: 2\n"
  }, 
  "service-instance-remove": {
    "usage": "tsuru service-instance-remove <service-name> <service-instance-name> [--assume-yes] [--unbind]", 
    "desc": "Destroys a service instance. It can't remove a service instance that is bound\nto an app, so before remove a service instance, make sure there is no apps\nbound to it (see [[tsuru service-instance-info]] command).\n\nFlags:\n  \n  -u, --unbind  (= false)\n      Don't ask for confirmation, just remove all applications bound.\n  -y, --assume-yes  (= false)\n      Don't ask for confirmation, just remove the service.\n  \nMinimum # of arguments: 2\n"
  }, 
  "role-list": {
    "usage": "tsuru role-list", 
    "desc": "List all existing roles.\n\n"
  }, 
  "role-remove": {
    "usage": "tsuru role-remove <role-name> [-y/--assume-yes]", 
    "desc": "Remove an existing role.\n\nFlags:\n  \n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \nMinimum # of arguments: 1\n"
  }, 
  "login": {
    "usage": "tsuru login [email]", 
    "desc": "Initiates a new tsuru session for a user. If using tsuru native authentication\nscheme, it will ask for the email and the password and check if the user is\nsuccessfully authenticated. If using OAuth, it will open a web browser for the\nuser to complete the login.\n\nAfter that, the token generated by the tsuru server will be stored in\n[[${HOME}/.tsuru/token]].\n\nAll tsuru actions require the user to be authenticated (except [[tsuru login]]\nand [[tsuru version]]).\n\n"
  }, 
  "team-remove": {
    "usage": "tsuru team-remove <team-name>", 
    "desc": "Removes a team from tsuru server. You're able to remove teams that you're\nmember of. A team that has access to any app cannot be removed. Before\nremoving a team, make sure it does not have access to any app (see \"app-grant\"\nand \"app-revoke\" commands for details).\n\nFlags:\n  \n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \nMinimum # of arguments: 1\n"
  }, 
  "service-status": {
    "usage": "tsuru service-status", 
    "desc": "This command was removed. You should use `tsuru service-instance-status` instead.\n\n"
  }, 
  "bs-env-set": {
    "usage": "tsuru bs-env-set", 
    "desc": "This command was removed. You should use `tsuru-admin node-container-update big-sibling` instead.\n\n"
  }, 
  "target-list": {
    "usage": "tsuru target-list", 
    "desc": "Displays the list of targets, marking the current.\n\nOther commands related to target:\n\n  - target-add: adds a new target to the list of targets\n  - target-set: defines one of the targets in the list as the current target\n  - target-remove: removes one target from the list\n\n"
  }, 
  "role-info": {
    "usage": "tsuru role-info <role-name>", 
    "desc": "Get information about specific role.\n\nMinimum # of arguments: 1\n"
  }, 
  "containers-rebalance": {
    "usage": "tsuru containers-rebalance [--dry] [-y/--assume-yes] [-m/--metadata <metadata>=<value>]... [-a/--app <appname>]...", 
    "desc": "Move containers creating a more even distribution between docker nodes.\nInstead of specifying hosts as in the containers-move command, this command\nwill automatically choose to which host each unit should be moved, trying to\ndistribute the units as evenly as possible.\n\nThe --dry flag runs the balancing algorithm without doing any real\nmodification. It will only print which units would be moved and where they\nwould be created.\n\nFlags:\n  \n  -a, --app  (= [])\n      Filter by app name\n  --dry  (= false)\n      Dry run, only shows what would be done\n  -m, --metadata  (= {})\n      Filter by host metadata\n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \n"
  }, 
  "plugin-install": {
    "usage": "tsuru plugin-install <plugin-name> <plugin-url>", 
    "desc": "Downloads the plugin file. It will be copied to [[$HOME/.tsuru/plugins]].\n\nMinimum # of arguments: 2\n"
  }, 
  "service-doc": {
    "usage": "tsuru service-doc", 
    "desc": "This command was removed. You should use `tsuru service-info` instead.\n\n"
  }, 
  "unit-remove": {
    "usage": "tsuru unit-remove <# of units> [-a/--app appname] [-p/-process processname]", 
    "desc": "Removes units from a process of an application. You need to have access to the\napp to be able to remove units from it.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  -p, --process (= \"\")\n      Process name\n  \nMinimum # of arguments: 1\n"
  }, 
  "node-container-upgrade": {
    "usage": "tsuru node-container-upgrade <name> [-p/--pool poolname] [-y]", 
    "desc": "Upgrade version and restart node containers.\n\nFlags:\n  \n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \nMinimum # of arguments: 1\nMaximum # of arguments: 1\n"
  }, 
  "docker-node-add": {
    "usage": "tsuru docker-node-add [param_name=param_value]... [--register]", 
    "desc": "Creates or registers a new node in the cluster.\nBy default, this command will call the configured IaaS to create a new\nmachine. Every param will be sent to the IaaS implementation.\n\nIaaS providers should have been previously configured in the [[tsuru.conf]]\nfile. See tsuru.conf reference docs for more information.\n\nIf using an IaaS to create a node is not wanted it's possible to simply\nregister an existing docker node with the [[--register]] flag.\n\nParameters with special meaning:\n  iaas=<iaas name>\n    Which iaas provider should be used, if not set tsuru will use the default\n    iaas specified in tsuru.conf file.\n\n  template=<template name>\n    A machine template with predefined parameters, additional parameters will\n    override template ones. See 'machine-template-add' command.\n\n  address=<docker api url>\n    Only used if [[--register]] flag is used. Should point to the endpoint of\n    a working docker server.\n\n  pool=<pool name>\n    Mandatory parameter specifying to which pool the added node will belong.\n    Available pools can be lister with the [[pool-list]] command.\n\n\nFlags:\n  \n  --register  (= false)\n      Registers an existing docker endpoint, the IaaS won't be called.\n  \n"
  }, 
  "env-set": {
    "usage": "tsuru env-set <NAME=value> [NAME=value] ... [-a/--app appname] [-p/--private] [--no-restart]", 
    "desc": "Sets environment variables for an application.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  --no-restart  (= false)\n      Sets environment varibles without restart the application\n  -p, --private  (= false)\n      Private environment variables\n  \nMinimum # of arguments: 1\n"
  }, 
  "user-create": {
    "usage": "tsuru user-create <email>", 
    "desc": "Creates a user within tsuru remote server. It will ask for the password before issue the request.\n\nMinimum # of arguments: 1\n"
  }, 
  "team-list": {
    "usage": "tsuru team-list", 
    "desc": "List all teams that you are member.\n\n"
  }, 
  "target-set": {
    "usage": "tsuru target-set <label>", 
    "desc": "Change current target (tsuru server)\n\n\nMinimum # of arguments: 1\n"
  }, 
  "env-unset": {
    "usage": "tsuru env-unset <ENVIRONMENT_VARIABLE1> [ENVIRONMENT_VARIABLE2] ... [ENVIRONMENT_VARIABLEN] [-a/--app appname] [--no-restart]", 
    "desc": "Unset environment variables for an application.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  --no-restart  (= false)\n      Unset environment variables without restart the application\n  \nMinimum # of arguments: 1\n"
  }, 
  "plugin-list": {
    "usage": "tsuru plugin-list", 
    "desc": "List installed tsuru plugins.\n\n"
  }, 
  "app-team-owner-set": {
    "usage": "tsuru app-team-owner-set", 
    "desc": "This command was removed. You should use `tsuru service-info` instead.\n\n"
  }, 
  "docker-node-list": {
    "usage": "tsuru docker-node-list [--filter/-f <metadata>=<value>]...", 
    "desc": "Lists nodes in the cluster. It will also show you metadata associated to each\nnode and the IaaS ID if the node was added using tsuru IaaS providers.\n\nUsing the [[-f/--filter]] flag, the user is able to filter the nodes that\nappear in the list based on the key pairs displayed in the metadata column.\nUsers can also combine filters using [[-f]] multiple times.\n\nFlags:\n  \n  -f, --filter  (= {})\n      Filter by metadata name and value\n  -q  (= false)\n      Display only nodes IP address\n  \n"
  }, 
  "key-add": {
    "usage": "tsuru key-add <key-name> <path/to/key/file.pub>", 
    "desc": "Sends your public key to the git server used by tsuru.\n\nFlags:\n  \nMinimum # of arguments: 2\n"
  }, 
  "token-show": {
    "usage": "tsuru token-show [--user/-u useremail]", 
    "desc": "Shows API token for the user. This token allow authenticated API calls to\ntsuru and will never expire. This is useful for integrating CI servers with\ntsuru.\n\nThe key will be generated the first time this command is called. See [[tsuru token-regenerate]]\nif you need to invalidate an existing token.\n\nFlags:\n  \n  -u, --user (= \"\")\n      Shows API token for the given user email\n  \n"
  }, 
  "user-list": {
    "usage": "tsuru user-list [--user/-u useremail] [--role/-r role [-c/--context-value value]]", 
    "desc": "List all users in tsuru. It may also filter users by user email or role name with context value.\n\nFlags:\n  \n  -c, --context-value (= \"\")\n      Filter user by role context value\n  -r, --role (= \"\")\n      Filter user by role\n  -u, --user (= \"\")\n      Filter user by user email\n  \n"
  }, 
  "token-regenerate": {
    "usage": "tsuru token-regenerate [--user/-u useremail]", 
    "desc": "Generates a new API token. This invalidates previously generated API tokens.\n\nFlags:\n  \n  -u, --user (= \"\")\n      Generates a new API token for the given user email\n  \n"
  }, 
  "env-get": {
    "usage": "tsuru env-get [-a/--app appname] [ENVIRONMENT_VARIABLE1] [ENVIRONMENT_VARIABLE2] ...", 
    "desc": "Retrieves environment variables for an application.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  \n"
  }, 
  "app-create": {
    "usage": "tsuru app-create <appname> <platform> [--plan/-p plan_name] [--team/-t (team owner)] [--pool/-o pool_name] [--description/-d description] [--router-opts key=value]...", 
    "desc": "Creates a new app using the given name and platform. For tsuru,\na platform is provisioner dependent. To check the available platforms, use the\ncommand [[tsuru platform-list]] and to add a platform use the command [[tsuru-admin platform-add]].\n\nIn order to create an app, you need to be member of at least one team. All\nteams that you are member (see [[tsuru team-list]]) will be able to access the\napp.\n\nThe [[--platform]] parameter is the name of the platform to be used when\ncreating the app. This will define how tsuru understands and executes your\napp. The list of available platforms can be found running [[tsuru platform-list]].\n\nThe [[--plan]] parameter defines the plan to be used. The plan specifies how\ncomputational resources are allocated to your application. Typically this\nmeans limits for memory and swap usage, and how much cpu share is allocated.\nThe list of available plans can be found running [[tsuru plan-list]].\n\nIf this parameter is not informed, tsuru will choose the plan with the\n[[default]] flag set to true.\n\nThe [[--team]] parameter describes which team is responsible for the created\napp, this is only needed if the current user belongs to more than one team, in\nwhich case this parameter will be mandatory.\n\nThe [[--pool]] parameter defines which pool your app will be deployed.\nThis is only needed if you have more than one pool associated with your teams.\n\nThe [[--description]] parameter sets a description for your app.\nIt is an optional parameter, and if its not set the app will only not have a\ndescription associated.\n\nThe [[--router-opts]] parameter allow passing custom parameters to the router\nused by the application's plan. The key and values used depends on the router\nimplementation.\n\nFlags:\n  \n  -d, --description (= \"\")\n      App description\n  -o, --pool (= \"\")\n      Pool to deploy your app\n  -p, --plan (= \"\")\n      The plan used to create the app\n  --router-opts  (= {})\n      Router options\n  -t, --team (= \"\")\n      Team owner app\n  \nMinimum # of arguments: 2\n"
  }, 
  "role-default-remove": {
    "usage": "tsuru role-default-remove [--user-create <role name>]... [--team-create <role name>]...", 
    "desc": "Remove a default role from a specific event.\n\nFlags:\n  \n  --team-create  (= [])\n      role added to user when a new team is created\n  --user-create  (= [])\n      role added to user when user is created\n  \n"
  }, 
  "docker-autoscale-info": {
    "usage": "tsuru docker-autoscale-info", 
    "desc": "Display the current configuration for tsuru autoscale,\nincluding the set of rules and the current metadata filter.\n\nThe metadata filter is the value that defines which node metadata will be used\nto group autoscale rules. A common approach is to use the \"pool\" as the\nfilter. Then autoscale can be configured for each matching rule value.\n\n"
  }, 
  "service-remove": {
    "usage": "tsuru service-remove", 
    "desc": "This command was removed. You should use `tsuru service-instance-remove` instead.\n\n"
  }, 
  "target": {
    "topic": "In tsuru, a target is the address of the remote tsuru server.\n\nEach target is identified by a label and a HTTP/HTTPS address. The client\nrequires at least one target to connect to, there's no default target. A user\nmay have multiple targets, but he/she will be able to use only per session."
  }, 
  "cname-remove": {
    "usage": "tsuru cname-remove <cname> [<cname> ...] [-a/--app appname]", 
    "desc": "Removes a CNAME from the application. This undoes the change that cname-add\ndoes.\n\nAfter unsetting the CNAME from the app, [[tsuru app-list]] and [[tsuru app-\ninfo]] will display the internal, unfriendly address that tsuru uses.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  \nMinimum # of arguments: 1\n"
  }, 
  "cname-add": {
    "usage": "tsuru cname-add <cname> [<cname> ...] [-a/--app appname]", 
    "desc": "Adds a new CNAME to the application.\n\nIt will not manage any DNS register, it's up to the user to create the DNS\nregister. Once the app contains a custom CNAME, it will be displayed by \"app-\nlist\" and \"app-info\".\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  \nMinimum # of arguments: 1\n"
  }, 
  "service-update": {
    "usage": "tsuru service-update", 
    "desc": "This command was removed. You should use `tsuru service-instance-update` instead.\n\n"
  }, 
  "containers-move": {
    "usage": "tsuru containers-move <from host> <to host>", 
    "desc": "Move all containers from one host to another.\nThis command allows you to move all containers from one host to another. This\nis useful when doing maintenance on hosts. <from host> and <to host> must be\nhost names of existing docker nodes.\n\nThis command will go through the following steps:\n\n* Enumerate all units at the origin host;\n* For each unit, create a new unit at the destination host;\n* Erase each unit from the origin host.\n\nMinimum # of arguments: 2\n"
  }, 
  "node-container-add": {
    "usage": "tsuru node-container-add <name> [-p/--pool poolname] [-r/--raw path=value]... [docker run flags]...", 
    "desc": "Add new node container or overwrite existing one. If the pool name is omitted\nthe node container will be valid for all pools.\n\nFlags:\n  \n  -e, --env  (= [])\n      Set environment variables\n  --image (= \"\")\n      Image that will be used\n  --log-driver (= \"\")\n      Logging driver for container\n  --log-opt  (= {})\n      Log driver options\n  --net (= \"\")\n      Connect a container to a network\n  -o, --pool (= \"\")\n      Pool to add container config. If empty it'll be a default entry to all pools.\n  -p, --publish  (= [])\n      Publish a container's port(s) to the host\n  --privileged  (= false)\n      Give extended privileges to this container\n  -r, --raw  (= {})\n      Add raw parameter to node container api call\n  --restart (= \"\")\n      Restart policy to apply when a container exits\n  -v, --volume  (= [])\n      Bind mount a volume\n  \nMinimum # of arguments: 1\nMaximum # of arguments: 1\n"
  }, 
  "team-create": {
    "usage": "tsuru team-create <teamname>", 
    "desc": "Create a team for the user. tsuru requires a user to be a member of at least\none team in order to create an app or a service instance.\n\nWhen you create a team, you're automatically member of this team.\n\nMinimum # of arguments: 1\n"
  }, 
  "app-shell": {
    "usage": "tsuru app-shell [unit-id] -a/--app <appname>", 
    "desc": "Opens a remote shell inside unit, using the API server as a proxy. You\ncan access an app unit just giving app name, or specifying the id of the unit.\nYou can get the ID of the unit using the app-info command.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  \n"
  }, 
  "install": {
    "usage": "tsuru install", 
    "desc": "Flags:\n  \n  -c, --config (= \"\")\n      Configuration file\n  \n"
  }, 
  "docker-healing-update": {
    "usage": "tsuru docker-healing-update [-p/--pool pool] [--enable] [--disable] [--max-unresponsive <seconds>] [--max-unsuccessful <seconds>]", 
    "desc": "Update node healing configuration\n\nFlags:\n  \n  --disable  (= false)\n      Disable active node healing\n  --enable  (= false)\n      Enable active node healing\n  --max-unresponsive  (= -1)\n      Number of seconds tsuru will wait for the node to notify it's alive\n  --max-unsuccessful  (= -1)\n      Number of seconds tsuru will wait for the node to run successul checks\n  -p, --pool (= \"\")\n      The pool name to which the configuration will apply. If unset it'll be set as default for all pools.\n  \n"
  }, 
  "service-instance-add": {
    "usage": "tsuru service-instance-add <service-name> <service-instance-name> [plan] [-t/--team-owner <team>] [-d/--description description]", 
    "desc": "Creates a service instance of a service. There can later be binded to\napplications with [[tsuru service-bind]].\n\nThis example shows how to add a new instance of **mongodb** service, named\n**tsuru_mongodb** with the plan **small**:\n\n::\n\n    $ tsuru service-instance-add mongodb tsuru_mongodb small -t myteam\n\n\nFlags:\n  \n  -d, --description (= \"\")\n      service instance description\n  -t, --team-owner (= \"\")\n      the team that owns the service (mandatory if the user is member of more than one team)\n  \nMinimum # of arguments: 2\nMaximum # of arguments: 3\n"
  }, 
  "docker-node-remove": {
    "usage": "tsuru docker-node-remove <address> [--no-rebalance] [--destroy] [-y]", 
    "desc": "Removes a node from the cluster.\n\nBy default tsuru will redistribute all containers present on the removed node\namong other nodes. This behavior can be inhibited using the [[--no-rebalance]]\nflag.\n\nIf the node being removed was created using a IaaS provider tsuru will NOT\ndestroy the machine on the IaaS, unless the [[--destroy]] flag is used.\n\nFlags:\n  \n  --destroy  (= false)\n      Destroy node from IaaS\n  --no-rebalance  (= false)\n      Do not rebalance containers from removed node.\n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \nMinimum # of arguments: 1\n"
  }, 
  "docker-autoscale-list": {
    "usage": "tsuru docker-autoscale-list [--page/-p 1]", 
    "desc": "List node auto scale history.\n\nFlags:\n  \n  -p, --page  (= 1)\n      Current page\n  \n"
  }, 
  "app-revoke": {
    "usage": "tsuru app-revoke <teamname> [-a/--app appname]", 
    "desc": "Revokes the permission to access an application from a team. You need to have\naccess to the application to revoke access from a team.\n\nAn application cannot be orphaned, so it will always have at least one\nauthorized team.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  \nMinimum # of arguments: 1\n"
  }, 
  "plan-list": {
    "usage": "tsuru plan-list [--bytes]", 
    "desc": "List available plans that can be used when creating an app.\n\nFlags:\n  \n  -b, --bytes  (= false)\n      bytesized units for memory and swap.\n  \n"
  }, 
  "event-cancel": {
    "usage": "tsuru event-cancel <event-id> <reason> [-y]", 
    "desc": "Cancel a running event.\n\nFlags:\n  \n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \nMinimum # of arguments: 2\n"
  }, 
  "service-info": {
    "usage": "tsuru service-info <service-name>", 
    "desc": "Displays a list of all instances of a given service (that the user has access\nto), and apps bound to these instances.\n\nMinimum # of arguments: 1\n"
  }, 
  "role-permission-add": {
    "usage": "tsuru role-permission-add <role-name> <permission-name>...", 
    "desc": "Add a new permission to an existing role.\n\nMinimum # of arguments: 2\n"
  }, 
  "service-bind": {
    "usage": "tsuru service-bind", 
    "desc": "This command was removed. You should use `tsuru service-instance-bind` instead.\n\n"
  }, 
  "service-instance-bind": {
    "usage": "tsuru service-instance-bind <service-name> <service-instance-name> [-a/--app appname] [--no-restart]", 
    "desc": "Binds an application to a previously created service instance. See [[tsuru\nservice-add]] for more details on how to create a service instance.\n\nWhen binding an application to a service instance, tsuru will add new\nenvironment variables to the application. All environment variables exported\nby bind will be private (not accessible via [[tsuru env-get]]).\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  --no-restart  (= false)\n      Binds an application to a service instance without restart the application\n  \nMinimum # of arguments: 2\n"
  }, 
  "app-deploy-list": {
    "usage": "tsuru app-deploy-list [-a/--app <appname>]", 
    "desc": "List information about deploys for an application.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  \n"
  }, 
  "user-info": {
    "usage": "tsuru user-info", 
    "desc": "Displays information about the current user.\n\n"
  }, 
  "user-remove": {
    "usage": "tsuru user-remove [email]", 
    "desc": "Remove currently authenticated user from remote tsuru\nserver. Since there cannot exist any orphan teams, tsuru will refuse to remove\na user that is the last member of some team. If this is your case, make sure\nyou remove the team using `team-remove` before removing the user.\n\nMaximum # of arguments: 1\n"
  }, 
  "app-deploy-rollback": {
    "usage": "tsuru app-deploy-rollback [-a/--app appname] [-y/--assume-yes] <image-name>", 
    "desc": "Deploys an existing image for an app. You can list available images with `tsuru app-deploy-list`.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \nMinimum # of arguments: 1\n"
  }, 
  "reset-password": {
    "usage": "tsuru reset-password <email> [--token|-t <token>]", 
    "desc": "Resets the user password.\n\nThis process is composed of two steps:\n\n1. Generate a new token\n2. Reset the password using the token\n\nIn order to generate the token, users should run this command without the\n--token flag. The token will be mailed to the user.\n\nWith the token in hand, the user can finally reset the password using the\n--token flag. The new password will also be mailed to the user.\n\nFlags:\n  \n  -t, --token (= \"\")\n      Token to reset the password\n  \nMinimum # of arguments: 1\n"
  }, 
  "team-user-add": {
    "usage": "tsuru team-user-add", 
    "desc": "This command was removed. You should use `tsuru role-assign` instead.\n\n"
  }, 
  "target-remove": {
    "usage": "tsuru target-remove", 
    "desc": "Remove a target from target-list (tsuru server)\n\n\nMinimum # of arguments: 1\n"
  }, 
  "service-instance-unbind": {
    "usage": "tsuru service-instance-unbind <service-name> <service-instance-name> [-a/--app appname] [--no-restart]", 
    "desc": "Unbinds an application from a service instance. After unbinding, the instance\nwill not be available anymore. For example, when unbinding an application from\na MySQL service, the application would lose access to the database.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  --no-restart  (= false)\n      Unbinds an application from a service instance without restart the application\n  \nMinimum # of arguments: 2\n"
  }, 
  "event-info": {
    "usage": "tsuru event-info <event-id>", 
    "desc": "Show detailed information about one single event.\n\nMinimum # of arguments: 1\nMaximum # of arguments: 1\n"
  }, 
  "role-default-add": {
    "usage": "tsuru role-default-add [--user-create <role name>]... [--team-create <role name>]...", 
    "desc": "Add a new default role on a specific event.\n\nFlags:\n  \n  --team-create  (= [])\n      role added to user when a new team is created\n  --user-create  (= [])\n      role added to user when user is created\n  \n"
  }, 
  "app-remove": {
    "usage": "tsuru app-remove [-a/--app appname] [-y/--assume-yes]", 
    "desc": "Removes an application. If the app is bound to any service instance, all binds\nwill be removed before the app gets deleted (see [[tsuru service-unbind]]).\n\nYou need to be a member of a team that has access to the app to be able to\nremove it (you are able to remove any app that you see in [[tsuru app-list]]).\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \n"
  }, 
  "service-instance-status": {
    "usage": "tsuru service-instance-status <service-name> <service-instance-name>", 
    "desc": "Displays the status of the given service instance. For now, it checks only if\nthe instance is \"up\" (receiving connections) or \"down\" (refusing connections).\n\nMinimum # of arguments: 2\n"
  }, 
  "docker-log-info": {
    "usage": "tsuru docker-log-info", 
    "desc": "Prints information about docker log configuration for each pool.\n\n"
  }, 
  "app-run": {
    "usage": "tsuru app-run <command> [commandarg1] [commandarg2] ... [commandargn] [-a/--app appname] [-o/--once]", 
    "desc": "Runs an arbitrary command in application's containers. The base directory for\nall commands is the root of the application.\n\nIf you use the [[--once]] flag tsuru will run the command only in one unit.\nOtherwise, it will run the command in all units.\n\nFlags:\n  \n  -a, --app (= \"\")\n      The name of the app.\n  -o, --once  (= false)\n      Running only one unit\n  \nMinimum # of arguments: 1\n"
  }, 
  "service-instance-info": {
    "usage": "tsuru service-instance-info <service-name> <instance-name>", 
    "desc": "Displays the information of the given service instance.\n\nMinimum # of arguments: 2\n"
  }, 
  "docker-healing-list": {
    "usage": "tsuru docker-healing-list [--node] [--container]", 
    "desc": "List healing history for nodes or containers.\n\nFlags:\n  \n  --container  (= false)\n      List only healing process started for containers\n  --node  (= false)\n      List only healing process started for nodes\n  \n"
  }, 
  "key-list": {
    "usage": "tsuru key-list [-n/--no-truncate]", 
    "desc": "Lists the public keys registered in the current user account.\n\nFlags:\n  \n  -n, --no-truncate  (= false)\n      disable truncation of key content\n  \n"
  }, 
  "service-list": {
    "usage": "tsuru service-list", 
    "desc": "Retrieves and shows a list of services the user has access. If there are\ninstances created for any service they will also be shown.\n\n"
  }, 
  "team-user-list": {
    "usage": "tsuru team-user-list", 
    "desc": "This command was removed. You should use `tsuru user-list` instead.\n\n"
  }, 
  "key-remove": {
    "usage": "tsuru key-remove <key-name> [-y/--assume-yes]", 
    "desc": "Removes your public key from the git server used by tsuru. The key will be\nremoved from the current logged in user.\n\nFlags:\n  \n  -y, --assume-yes  (= false)\n      Don't ask for confirmation.\n  \nMinimum # of arguments: 1\n"
  }, 
  "pool-list": {
    "usage": "tsuru pool-list", 
    "desc": "List all pools available for deploy.\n\n"
  }, 
  "uninstall": {
    "usage": "tsuru uninstall", 
    "desc": "Flags:\n  \n  -c, --config (= \"\")\n      Configuration file\n  \n"
  }
}